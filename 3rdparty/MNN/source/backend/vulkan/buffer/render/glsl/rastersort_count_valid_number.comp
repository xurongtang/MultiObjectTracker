#version 440 core
#extension GL_AMD_gpu_shader_half_float: enable
layout(std430) buffer;

layout(set=0, binding=0) writeonly buffer histogram{
    highp uint data[];
} uHistogram;

layout(set=0, binding=1) readonly buffer sourceBuffer0{
#ifdef USE_HALF
    f16vec4 data[];
#else
    vec4 data[];
#endif
} uAttr;

layout(set=0, binding=2) readonly buffer sourceBuffer1{
    highp vec4 data[];
} uViewProj;

layout(set=0, binding=3) uniform constBuffer {
    uvec4 point; // point size
} uConstant;

layout(local_size_x_id = 0) in;
layout(local_size_y_id = 1) in;
layout(local_size_z_id = 2) in;
layout (constant_id = 3) const int LOCAL_SIZE = 1024;

void main()
{
    uint groupSize = gl_NumWorkGroups.x;
    uint threadId = gl_GlobalInvocationID.x;
    uint binSize = 0;
    uint threadNumber = groupSize * LOCAL_SIZE;
    uint totalSize = uConstant.point.x;
    uint size = (totalSize + threadNumber - 1) / threadNumber;
    uint sta = threadId * size;
    uint fin = min(sta + size, totalSize);
    for (uint pos = sta; pos < fin; ++pos) {
        vec4 vp0 = uViewProj.data[0];
        vec4 vp1 = uViewProj.data[1];
        vec4 vp2 = uViewProj.data[2];
        vec4 vp3 = uViewProj.data[3];
        vec4 attr = vec4(uAttr.data[pos]);
        float depth = attr.x * vp0.z + attr.y * vp1.z + attr.z * vp2.z + vp3.z;
        float dw = attr.x * vp0.w + attr.y * vp1.w + attr.z * vp2.w + vp3.w;
        depth = depth / dw;
        if (depth >= 0.0 && depth <= 1.0) {
            binSize++;
        }
    }
    uHistogram.data[threadId] = binSize;
}
